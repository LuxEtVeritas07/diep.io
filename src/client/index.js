// Generated by CoffeeScript 2.5.1
var Tank, app, player, socket;

import * as PIXI from 'pixi.js';

import io from 'socket.io-client';

import tanks from "./../public/assets/tanks.json";

socket = io(":8081");

socket.on("connect", function() {
  console.log("CONNECTED!");
  socket.on("disconnect", function() {
    console.log("DISCONNECTED!");
  });
});

app = new PIXI.Application({
  width: window.innerWidth,
  height: window.innerHeight,
  backgroundColor: 0x1099bb,
  resolution: window.devicePixelRatio,
  autoResize: true
});

document.body.appendChild(app.view);

Tank = class Tank {
  constructor(name, radius, tanks) {
    this.name = name;
    this.radius = radius;
    this.tanks = tanks.tanks;
    this.types = tanks.types;
    this.tank = this.tanks[this.name];
    if (this.tank === void 0) {
      console.error("Nie ma takiego czo≈Çgu!");
    }
    this.container = new PIXI.Container();
    this.genLayer(this.tank.addDowns);
    this.genShape();
    this.genLayer(this.tank.addUps);
    return;
  }

  genLayer(elements) {
    var graphics, i, j, k, l, len, len1, p, ref, results;
    results = [];
    for (k = 0, len = elements.length; k < len; k++) {
      i = elements[k];
      if (i.offset === void 0) {
        i.offset = [0, 0];
      }
      if (i.rotation === void 0) {
        i.rotation = 0;
      }
      if (i.type === "rectangle") {
        graphics = new PIXI.Graphics();
        graphics.lineStyle(3, 0x5B6465);
        graphics.beginFill(0x97989A);
        graphics.drawRect(i.offset[0] * this.radius - i.width / 2 * this.radius, i.offset[1] * this.radius - i.height / 2 * this.radius, i.width * this.radius, i.height * this.radius);
        graphics.endFill();
        graphics.rotation = i.rotation / 180 * Math.PI;
        results.push(this.container.addChild(graphics));
      } else if (i.type === "circle") {
        graphics = new PIXI.Graphics();
        graphics.lineStyle(3, 0x5B6465);
        graphics.beginFill(0x97989A, 1);
        graphics.drawCircle(i.offset[0], i.offset[1], i.radius * this.radius);
        graphics.endFill();
        results.push(this.container.addChild(graphics));
      } else if (this.types[i.type] !== void 0) {
        graphics = new PIXI.Graphics();
        if (i.bg === "black") {
          graphics.lineStyle(1, 0x5B6465);
          graphics.beginFill(0x5B6465);
        } else {
          graphics.lineStyle(3, 0x5B6465);
          graphics.beginFill(0x97989A);
        }
        p = true;
        ref = this.types[i.type];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          j = ref[l];
          if (p) {
            p = false;
            graphics.moveTo(j[0] * this.radius, j[1] * this.radius);
          } else {
            graphics.lineTo(j[0] * this.radius, j[1] * this.radius);
          }
        }
        graphics.closePath();
        graphics.endFill();
        graphics.rotation = i.rotation / 180 * Math.PI;
        results.push(this.container.addChild(graphics));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  genShape() {
    var graphics;
    if (this.tank.shape === "circle") {
      graphics = new PIXI.Graphics();
      graphics.lineStyle(3, 0x5B6465);
      graphics.beginFill(0x4BB6E0, 1);
      graphics.drawCircle(0, 0, this.radius);
      graphics.endFill();
      return this.container.addChild(graphics);
    } else if (this.tank.shape === "rectangle") {
      graphics = new PIXI.Graphics();
      graphics.lineStyle(3, 0x5B6465);
      graphics.beginFill(0x4BB6E0, 1);
      graphics.drawRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);
      graphics.endFill();
      return this.container.addChild(graphics);
    }
  }

};

player = new Tank("auto_smasher", 50, tanks);

console.log(player);

// app.ticker.add (delta)->
// 	player.rotation-=0.01*delta
// 	return
player.container.position.set(window.innerWidth / 2, window.innerHeight / 2);

app.stage.addChild(player.container);
